<?phpclass Admins extends CI_Controller {	public function __construct()	{		parent::__construct();		$this->load->model('admin', 'adminModel');		$this->load->model('product', 'productModel');		//TODO session encryption?		$this->load->library('session');	}	private function isAdminLoggedIn()	{		$adminId = $this->session->userdata('admin_id');		if (!empty($adminId)) $admin = Admin::getAdmins($adminId);		if (isset($admin) && $admin->getId() > 0) return true;		else return false;	}		public function logout()	{		$this->session->unset_userdata('admin_id');		$data['title'] = 'Home';		$this->load->view('templates/header', $data);			$this->load->view('pages/home');		$this->load->view('templates/footer');			}	public function login()	{			if ($this->isAdminLoggedIn()) 		{			$this->index();		}		else		{				$data['title'] = 'Log in:';						$this->load->helper('form');			$this->load->library('form_validation');						$this->form_validation->set_rules('name', 'user name', 'trim|required');			$this->form_validation->set_rules('password', 'details', 'trim|required|callback_length|callback_is_user['. $this->input->post('name') .']');						//since it didn't validate, the form is reloaded			if ($this->form_validation->run() === FALSE)			{				$this->load->view('templates/header', $data);					$this->load->view('admins/login', $data);				$this->load->view('templates/footer');							}			//validation passed, admin is logged in			else			{					$admin = Admin::getAdminByUsername($this->input->post('name'));				if(isset($admin))				{					$this->session->set_userdata('admin_id', $admin->getId());					$this->index();				}				else				{					$this->login();				}			}		}	}	public function length($password)	{				$length = strlen($password);		if ($length > 72)		{			$this->form_validation->length('length', 'Password cannot be longer than 72 characters!');			return FALSE;		}		else		{			return TRUE;		}		}	public function is_user($password, $username)	{		$isUser = false;		if(!empty($username)) $isUser = Admin::userExist($username, $password);				if (!$isUser)		{			$this->form_validation->set_message('is_user', 'Username or password incorrect!');			return FALSE;		}		else		{			return TRUE;		}			}	public function is_unique($username, $oldUsername = false)	{		if ($username == $oldUsername) return true;				$isUnique = false;		if(!empty($username)) $isUnique = Admin::usernameUnique($username);				if (!$isUnique)		{			$this->form_validation->set_message('is_unique', 'Username is taken.');			return FALSE;		}		else		{			return TRUE;		}		}	public function index()	{		if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$id = $this->session->userdata('admin_id');			$admin = Admin::getAdmins($id);			if (isset($admin))			{				$data['admin'] = $admin;				$data['title'] = 'Admin panel';						$this->load->view('templates/admin/header', $data);				$this->load->view('admins/index', $data);				$this->load->view('templates/admin/footer');				}			else			{				$this->logout();			}			}			}	public function adminslist($title = false)	{			if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$data['admins'] = Admin::getAdmins();			$data['title'] = $title ? $title : 'Admin Users List';								$this->load->view('templates/admin/header', $data);			$this->load->view('admins/adminslist', $data);			$this->load->view('templates/admin/footer');		}	}	public function create($adminId = false)	{			if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{					$data['title'] = empty($adminId) ? 'Create new Admin:' : 'Edit Admin:';			$data['admin'] = empty($adminId) ? new Admin() : Admin::getAdmins($adminId);  //or selectForUpdate() ???						$this->load->helper('form');			$this->load->library('form_validation');						$this->form_validation->set_rules('name', 'user name', 'trim|required|callback_is_unique'. 				(empty($adminId) ? '' : '['. $data['admin']->getUsername() .']'));			$this->form_validation->set_rules('password', 'password', 'trim|'. (!empty($adminId) ? '' : 'required|') .'callback_length');			$this->form_validation->set_rules('email', 'e-mail', 'trim|valid_email');						//since it didn't validate, the form is reloaded			if ($this->form_validation->run() === FALSE)			{				$this->load->view('templates/admin/header', $data);					$this->load->view('admins/create', $data);				$this->load->view('templates/admin/footer');						}			//validation passed, admin is created, so lets list all admins:			else			{				$data['admin']->setUsername($this->input->post('name'));				$data['admin']->setEmail($this->input->post('email'));				$password = $this->input->post('password');				if(!empty($password)) 				{					$isHashed = $data['admin']->setPassword($password);									if (!$isHashed)							{											$this->create($adminId);						return;					}				}								$isSaved = $data['admin']->save();				if ($isSaved) 				{						$this->adminslist('Data saved successfully!');				}				else				{					$this->create(adminId);				}			}		}	}	public function delete($adminId)	{			if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{						$success = false;			$admin = Admin::getAdmins($adminId); //or selectForUpdate??			if (isset($admin)) $success = $admin->delete();			if ($success) $this->adminslist('Delete successfull!');			else $this->adminslist('Delete unsuccessfull!');		}	}	public function products($title = false)	{		if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$data['products'] = Product::getProducts();			$data['title'] = $title ? $title : 'Products List';								$this->load->view('templates/admin/header', $data);			$this->load->view('admins/products', $data);			$this->load->view('templates/admin/footer');		}	}	public function createproduct($productId = false)	{			if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$data['title'] = empty($productId) ? 'Create new Product:' : 'Edit Product:';			if(!empty($productId)) $data['product'] = Product::getProducts($productId);  //or selectProductForUpdate() ?						$this->load->helper('form');			$this->load->helper('url');			$this->load->library('form_validation');						$this->form_validation->set_rules('title', 'title', 'trim|required'); 			$this->form_validation->set_rules('price', 'details', 'trim|required|float|abs');			$this->form_validation->set_rules('availability', 'availability', 'trim|required|integer|abs');						//since it didn't validate, the form is reloaded			if ($this->form_validation->run() === FALSE)			{				$this->load->view('templates/admin/header', $data);					$this->load->view('admins/createproduct', $data);				$this->load->view('templates/admin/footer');						}			//validation passed, lets save the product and list all product:			else			{				$productDetails = array(					'product_title' => $this->input->post('title'), 					'product_slug' => url_title($this->input->post('title'), 'dash', TRUE), 					'product_price' => $this->input->post('price'), 					'product_availability' => $this->input->post('availability'), 					); 								$success = false;				if(empty($productId))					{					$success = Product::createProduct($productDetails);				}				else				{					$product = Product::selectProductForUpdate($productId); // ?? or use $data['product'], which is already set!					if (isset($product)) $success =  $product->updateProduct($productDetails);				}								if ($success) 				{						$this->products('Product saved successfully!');				}				else				{					$this->createproduct($productId);				}			}		}	}	public function deleteproduct($productId)	{			if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{						$success = false;			$product = Product::selectProductForUpdate($productId);			if (isset($product)) $success = $product->deleteProduct();			if ($success) $this->products('Delete successfull!');			else $this->products('Delete unsuccessfull!');		}	}	public function contacts()	{		if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$this->load->model('contact', 'contactModel');			$data['contacts'] = Contact::getContacts();			$data['title'] = 'Contacts List';								$this->load->view('templates/admin/header', $data);			$this->load->view('admins/contacts', $data);			$this->load->view('templates/admin/footer');		}	}	public function orders()	{		if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{			$this->load->model('order', 'orderModel');			$data['orders'] = Order::getOrders();			$data['title'] = 'Orders List';								$this->load->view('templates/admin/header', $data);			$this->load->view('admins/orders', $data);			$this->load->view('templates/admin/footer');		}	}	public function newsletters()	{		if (!$this->isAdminLoggedIn()) 		{			$this->login();		}		else		{						$this->load->model('contact', 'contactModel');			$data['contacts'] = Contact::getContacts();			$data['title'] = 'Newsletters';								$this->load->view('templates/admin/header', $data);			$this->load->view('admins/newsletter', $data);			$this->load->view('templates/admin/footer');		}			}}